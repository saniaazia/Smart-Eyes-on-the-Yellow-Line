[PATHS]
# Path to your video file
video_path = "Upload video path"
temp_violation_images_dir = temp_violation_images
# Temporary local directory where clips are saved before uploading to Drive
temp_output_clips_dir = temp_vehicle_clips
output_processed_video_path = output_video/processed_output.mp4

[GOOGLE_SHEETS]
# The ID of your Google Sheet where logs will be appended
google_sheet_id = "Upload google sheet ID"

[GOOGLE_DRIVE]
# The ID of your root Google Drive folder where 'Violations' and 'Non_Violations_By_Type' will be created.
# If left empty (e.g., gdrive_root_folder_id = ), these folders will be created in your My Drive root.
gdrive_root_folder_id = "Upload folder ID"

[LINES_COORDINATES]
# Define the start and end points for your blue line (format: (X, Y))
#FOR VIDEO 
blue_line_start = (x1, y1)
blue_line_end = (x2, y2)
# Define the start points for your green lines.
# Note: green_line1_end and green_line2_end automatically use blue_line_start/end in the code.
green_line1_start = (x3, y3)
green_line2_start = (x4,y4)

[CAMERA_CONFIGS]
# List all camera IDs you want to process, separated by commas.
# Ensure a corresponding section exists for each ID (e.g., [CAMERA_1], [CAMERA_2]).
camera_ids = camera_1

[CAMERA_1]
#FOR RTSP
# Path to video file for Camera 1
video_path = "Upload URL"
# Path to save the processed output video for Camera 1
output_processed_video_path = output_video/processed_output_camera1.mp4
# Location associated with Camera 1
location = "Name of the location"
blue_line_start = (x1, y1)
blue_line_end = (x2, y2)
# Define the start points for your green lines.
# Note: green_line1_end and green_line2_end automatically use blue_line_start/end in the code.
green_line1_start = (x3, y3)
green_line2_start = (x4,y4)

[MODEL_CONFIG]
# Path to your YOLO model weights file (e.g., yolov5s.pt)
yolo_model_path = yolov8n.pt

[APP_PARAMETERS]
# Confidence threshold for object detection (0.0 to 1.0)
conf_threshold = 0.3
# Maximum distance (pixels) for matching old and new detections to track an object
max_distance_for_track = 75
# Number of frames to skip before removing an untracked object
max_frames_to_skip = 35

max_tolerated_frames_for_wait = 10
# Duration in seconds for a vehicle to wait behind the blue line to avoid violation
stop_duration_seconds = 3.0
# How long (in seconds) to display the red bounding box for a violation
violation_display_duration = 3.0
# Max pixel movement to consider 'static' in one frame
static_movement_threshold_pixels = 10
# Number of consecutive frames to confirm 'static'
static_frames_needed = 45
static_ignored_frames_needed = 45
# Minimum vertical movement (pixels) to determine direction
direction_movement_threshold_pixels = 10
# Target duration for each video clip in seconds
clip_duration_seconds = 5
# How many seconds of past frames to keep in buffer (must be >= clip_duration_seconds)
buffer_duration_seconds = 15
# Duration in seconds to start recording before the vehicle's first appearance
clip_pre_event_buffer_seconds = 2.0
# Duration in seconds to continue recording after the primary event (violation/crossing)
clip_post_event_buffer_seconds = 2.0
#Process YOLO inference at 10 frames per second. Adjust as needed.
yolo_inference_fps = 5 


# The buffer duration should be sufficiently large to hold the dynamic clip duration
# E.g., if a vehicle appears for 5s and we record 2s before and 2s after,
# the total needed buffer is 2s + 5s + 2s = 9s. A value like 10-15s is usually safe.
